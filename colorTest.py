# Instructions on how to use the program:
# 1. run program
# 2. click on button "Choose document" and choose a document
# 3. click on button "Generate Report" (this will print it out on the terminal and
# also add it to a word document/report
# 4. click on button "Choose document" if you want to add more documents, and click on the
# button "Generate Report" again, untill you don't have any more documents you want to use.
# 5. Then you can click on the open generated report button, which will automatically
# open up your word document with your report.
# 6. When you are done, click "End Program"
# 7. Contents found by the program should all now have been outputted in the terminal and
# in the word document generated by the program

# if you use python version 3.9 no changes in code is needed

import docx
from docx import Document
from docx.shared import RGBColor
from tkinter import *
from tkinter import filedialog
from typing import Tuple

#These libraries are for opening word document automatically
import os
import platform
import subprocess

# reads the text in the document and use the getcoloredTXT function
def readtxt(filename, color: Tuple[int, int, int]):
    doc = docx.Document(filename)
    text10 = ""
    fullText = []
    new = []
    for para in doc.paragraphs:
        # Getting the colored words from the doc
        if (getcoloredTxt(para.runs, color)):

            # Concatenating list of runs between the colored text to single a string
            sentence = "".join(r.text for r in para.runs)
            fullText.append(sentence)
            print(sentence) # Prints everything in the terminal

    global filtered_L # Will store the ones without a parent tag
    global hasChild # Will store the ones with a parent tag
    global fullText2 # will store everything found

    #Finds the lines without a childTag
    filtered_L = [value for value in fullText if "[" not in value]
    #Finds the lines with a childTag
    hasChild = [value for value in fullText if "[" in value]
    # will store everything found
    fullText2 = [value for value in fullText]
    #noParent = ""

    return fullText, filtered_L, hasChild

def getcoloredTxt(runs, color): # Will look for colored text

    coloredWords, word = [], ""
    for run in runs:
        if run.font.color.rgb == RGBColor(*color):
            word += str(run.text) # Saves everything found


        elif word != "": # This will find the parentTags
            coloredWords.append(word)
            parentTags.append(word)
            parents.append(word)
            word = ""

    if word != "": # This will find the parentTags
        coloredWords.append(word + "\n")
        #word = removeAfter(word)
        child.append(word)
        withChild.append(word)

    return coloredWords #returns everything found

def openFile(): #This will let the user pick a document from their own directory
    global filepath
    global filepath2
    filepath = filedialog.askopenfilename(initialdir="/",
                                          title="",
                                          filetypes= (("word documents","*.docx"),
                                                      ("all files","*.*")))
    file = open(filepath,'r')
    #print(filepath)
    file.close()
    filepath2 = str(filepath) # Will store the filepath to the document as a string

    return filepath2 # returns the filepath to the chosen document

def generateReport(): #
    fullText = readtxt(filename=filepath2,
                       color=(255, 0, 0))
    #filtered_L = readtxt(filename=filepath2,
    #                   color=(255, 0, 0))
    fullText10 = str(fullText)
    s = ''.join(fullText10)
    w = (s.replace (']', ']\n\n'))
    #w = (w.replace ('\n[', '['))
    #print('\n' + w)
    paragraph = report3.add_paragraph()
    runner = paragraph.add_run("\n" + filepath2 + "\n")
    runner.bold = True #makes the header bold
    # w will be user in the future
    w = (w.replace ('([', ''))
    w = (w.replace (',', ''))
    w = (w.replace ('' '', ''))

# creates a table
    table = report3.add_table(rows=1, cols=2)

    # Adds a heading in the 1st row of the table and adds
    row = table.rows[0].cells
    row[0].text = 'Parent Tag'
    row[1].text = 'Child Tag/Tags'

    # Adding style to a table
    table.style = 'Colorful List'

    # Saves the document to a location as "report3"
    report3.save('report3.docx')

    e = 0 # e will be used to go trough fullText2

    child2 = removeAfter(child) #removes everything after the child tag if there is anything to remove

    # while loop until all the tags has been added to the report
    while parentTags or child2:
        if len(parentTags) > 0 and parentTags[0]:
            row = table.add_row().cells # Adding a row and then adding data in it.
            row[0].text = parentTags[0]
            parentTags.remove(parentTags[0])

            if e < len(fullText2): #as long as variable e is not higher than the lines in fullText2
                if fullText2[e] in filtered_L: #filtered_L contains the parent tags without a child tag
                    row[1].text = "No child tag "
                    e += 1

                elif fullText2[e] not in filtered_L:
                    #print("has a child")
                    #print(fullText[e])
                    #row[1].text = "Has no child tag"
                    if child2:
                        row[1].text = child2[0]
                        child2.remove(child2[0])
                        fullText2.remove(fullText2[e])
                        e += 1

        if (len(child2) > 0 and child2[0]): #The rest of the child tags left will be added
            row[1].text = child2[0]
            child2.remove(child2[0])
            e += 1


        #if sentences : # This is in case there are any more parent tags left in the list
         #   row = table.add_row().cells # Adding a row and then adding data in it.
          #  row[0].text = sentences[0]
           # sentences.remove(sentences[0])
            #row[1].text = "No child tag"

        #if statement for orphan tags will be added here
        #elif not (len(child2) < 0 and sentences[0]) and  (child2[0] and len(child2) > 0): #This is for orphan tags
            #row = table.add_row().cells # Adding a row and then adding data in it.
            #row[1].text = child2[0]
            #child2.remove(child2[0])
            #row[0].text = "No parent tag"


    # Make sure everything is cleared before the program gets the next document
    child2.clear()
    parentTags.clear()
    child.clear()

    report3.save('report3.docx')

# This function removes everything after the child tag "]", example "pass"/"fail", etc.
def removeAfter(childtags):
    seperator = ']'
    childAfter = [i.rsplit(']', 1)[0] + seperator for i in childtags]

    return childAfter # returns it without everything after the child tag

# This function will open up the report automatically
def getDocument():
    if platform.system() == 'Darwin':
        subprocess.check_call(['open', 'report3.docx'])
    elif platform.system() == 'Windows':
        os.startfile('report3.docx')
    # os.startfile(report3) # try either one for windows if the first option gives error
    else:
        subprocess.call('xdg-open', report3)


if __name__ == '__main__':
    # Creates a word document, saves it as "report 3, and also adds a heading
    report3 = Document()
    report3.add_heading('Report', 0) #create word document
    paragraph = report3.add_paragraph()
    report3.save('report3.docx')

    # declaring different lists that will be used to store, tags and sentences
    parentTags = []
    #text = []
    child = []
    noChild = []
    withChild = []
    parents = []

    # Creates the gui, with title "TARGEST"
    window = Tk(className=' TARGEST')
    # set window size
    window.geometry("220x110")
    # Creates button 1
    button = Button(text="Choose Document",command=openFile)
    button.pack()
    # Creates button 2
    Button(window, text="Generate Report ", command=generateReport).pack()
    # creates button 3
    getDoc = Button(window, text="Open Generated Report", command=getDocument)
    getDoc.pack()
    # Creates button 4
    button = Button(text="End Program", command=window.destroy)
    button.pack()

    window.mainloop()






