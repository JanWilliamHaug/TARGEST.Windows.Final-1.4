## Instructions on how to use the program:
# 1. run program
# 2. click on button "Choose document" and choose a document
# 3. click on button "Generate Report" (this will print it out on the terminal and
# also add it to a word document/report
# 4. click on button "Choose document" if you want to add more documents, and click on the
# button "Generate Report" again, untill you don't have any more documents you want to use.
# 5. Then you can click on the open generated report button, which will automatically
# open up your word document with your report.
# 6. When you are done, click "End Program"
# 7. Contents found by the program should all now have been outputted in the terminal and
# in the word document generated by the program

# if you use python version 3.9 no changes in code should be needed
import docx
from docx import Document
from docx.shared import RGBColor
from tkinter import *
from tkinter import filedialog
from typing import Tuple

import re

#This libraries are for opening word document automatically
import os
import platform
import subprocess

# reads the text in the document and use the getcoloredTXT function
def readtxt(filename, color: Tuple[int, int, int]):
    doc = docx.Document(filename)
    text10 = ""
    fullText = []
    new = []
    global everything
    everything = []  # list of tags and text

    for para in doc.paragraphs:
        # Getting the colored words from the doc
        if (getcoloredTxt(para.runs, color)):
            # Concatenating list of runs between the colored text to single a string
            sentence = "".join(r.text for r in para.runs)
            fullText.append(sentence)
            #print(sentence) # Prints everything in the terminal
            everything.append(sentence)
            text10 = sentence
            parent.append("".join(r.text for r in para.runs))

    #print(fullText)
    global filtered_L # Will store the ones without a child tag
    global hasChild # Will store the ones with a child tag
    global fullText2 # will store everything found
    global children
    # Finds the lines without a childTag
    filtered_L = [value for value in fullText if "[" not in value]
    # Finds the lines with a childTag
    hasChild = [value for value in fullText if "[" in value]
    # will store everything found
    fullText2 = [value for value in fullText]



    return fullText, filtered_L, hasChild

def getcoloredTxt(runs, color): # Will look for colored text

    coloredWords, word = [], ""
    for run in runs:
        if run.font.color.rgb == RGBColor(*color):
            word += str(run.text) # Saves everything found


        elif word != "": # This will find the parentTags
            coloredWords.append(word)
            parentTags.append(word)
            parents.append(word)
            word = ""


    if word != "": # This will find the parentTags
        coloredWords.append(word + "\n")
        #word = removeAfter(word)
        child.append(word)
        withChild.append(word)



    return coloredWords #returns everything found


def openFile(): #This will let the user pick a document from their own directory
    global filepath
    global filepath2
    filepath = filedialog.askopenfilename(initialdir="/",
                                          title="",
                                          filetypes= (("word documents","*.docx"),
                                                      ("all files","*.*")))
    file = open(filepath,'r')
    #print(filepath)
    file.close()
    # Will store the filepath to the document as a string
    filepath2 = str(filepath)

    return filepath2

def generateReport(): #Will generate the report for tags
    fullText = readtxt(filename=filepath2,
                       color=(255, 0, 0))
    #filtered_L = readtxt(filename=filepath2, #For future use
    #                   color=(255, 0, 0))
    fullText10 = str(fullText)
    s = ''.join(fullText10)
    w = (s.replace (']', ']\n\n'))
    paragraph = report3.add_paragraph()
    filepath3 = str(filepath2.rsplit('/', 1)[-1]) # change filepath to something.docx
    filepath3 = filepath3.split('.', 1)[0] # removes .docx of the file name
    print(filepath3 + " added to the report")
    runner = paragraph.add_run("\n" + "Document Name: " + filepath3 + "\n")
    runner.bold = True #makes the header bold
    # w will be used in the future
    w = (w.replace ('([', ''))
    w = (w.replace (',', ''))
    w = (w.replace ('' '', ''))

    # creates a table
    table = report3.add_table(rows=1, cols=2)

    # Adds headers in the 1st row of the table
    row = table.rows[0].cells
    row[0].text = 'Child Tag'
    row[1].text = 'Parent Tag/tags'
    # Adding style to a table
    table.style = 'Colorful List'

    # Now save the document to a location
    report3.save('report3.docx')
    e = 0

    child2 = removeAfter(child) #removes everything after the child tag if there is anything to remove
    # while loop until all the  parentTags has been added to the report

    parents2 = parentTags # copy of parent tags list
    childCopy = child2  # copy of child tags list

    parents2 = [s.replace(" ", "") for s in parents2] # gets rid of spaces

    # creates a dict for parent and child tags
    dicts = {}
    dicts = dict(zip(parents2, childCopy)) #creates a dictrionary if there is a child tag and parent tag
    #print(dicts)
    #print(parents2)
    global dicts3
    dicts3 = {} # will hold parentTag and text, Orphan tags
    global dicts2
    dicts2 = {}  # will hold parentTag and text

    for x in parents2: # creates dicttionary for child tags and text
        text2 = removeParent(everything)  # child tag and text
        #text8 = [s.replace(" ", "") for s in text2]
        text3 = removechild(text2)  # only text list
        text4 = removeText(text2)  # child tags
        #text8 = [s.replace(" ", "") for s in text4]
        dicts3 = dict(zip(parents2, text3))  # creates a dictionary with child tags and text
        sorted(dicts3.keys())  # sorts the keys in the dictionary



    for x, y in dicts.items():
        #row = table.add_row().cells  # Adding a row and then adding data in it.
#        row[0].text = x
 #       row[1].text = y
        # text1 = int(str(list(fullText)))
        # print(everything)
        text2 = removeParent(everything) # child tag and text
        #text2 = removechild(everything)  # parent tags and text

        # print(text2)
        #text3 = removeParent(text2)  # only text list
        #text9 = ('"""' + str(text2) + '"""')  # child tag and text
        text3 = removechild(text2)  # only text list
        # print(text3)
        text4 = removeText(text2) # child tags
        # print(text4) #only parent tag list
        #text7 = [s.replace(" ", "") for s in text3]
        text8 = [s.replace(" ", "") for s in text4]

        dicts2 = dict(zip(parents2, text3)) # creates a dictionary with child tags and text
        sorted(dicts2.keys()) # sorts the keys in the dictionary

        #print(dicts2)

        #row = table.add_row().cells  # Adding a row and then adding data in it.
        #row[0].text = ""
        #row[1].text = ""

    m = 0
    while m < len(parents2):
        if dicts2:
            for key, value in dicts2.items():
                report3.add_paragraph("\n")
                report3.add_paragraph(key)
                stringKey = str(key)
                report3.add_paragraph(value)
                report3.add_paragraph(dicts[str(stringKey)], style='List Bullet')
                    #"'Insert Parent Tag here'")
                m += 1

        elif not dicts2: # this is for orphan tags
            for key, value in dicts3.items():
                report3.add_paragraph("\n")
                report3.add_paragraph(key)
                report3.add_paragraph(value)
                report3.add_paragraph(key + " is an orphan tags")
                m += 1


    while parentTags:
        row = table.add_row().cells # Adding a row and then adding data in it.
        row[0].text = parentTags[0] # Adds the parentTag to the table
        parentTags.remove(parentTags[0]) # Removes that tag after use



        if e < len(fullText2):  #as long as variable e is not higher than the lines in fullText2
            if fullText2[e] in filtered_L: #filtered_L contains the parent tags without a child tag


                row[1].text = " " # No child tag, so adds emopty string to that cell
                e += 1

            elif fullText2[e] not in filtered_L:
                if child2:
                    row[1].text = child2[0] #Adds childTag to table
                    child2.remove(child2[0]) #Removed that tag from the list
                    e += 1

    while parentTags: # In case there are any more parent tags left in the list
        row = table.add_row().cells # Adding a row and then adding data in it.
        row[0].text = parentTags[0]
        parentTags.remove(parentTags[0])

    while child2: #This is for orphan tags, but not finished
        row = table.add_row().cells # Adding a row and then adding data in it.
        row[1].text = child2[0]
        child2.remove(child2[0])

    # Make sure everything is cleared before the program gets the next document
    child2.clear()
    parentTags.clear()
    child.clear()
    report3.save('report3.docx') #Saves in document "report3"

def removeParent(text): #removes parent tags
    for line in text:
        childAfter = [i.rsplit('[', 1)[0] for i in text] # removes parent tags
        childAfter = [re.sub("[\(\[].*?[\)\]]", "", e) for e in childAfter]  # removes parent tags that are left
        childAfter = [re.sub("[\{\[].*?[\)\}]", "", e) for e in childAfter]  # removes "pass", "fail", etc.
    return childAfter



def removeText(text6): #this should remove everything before the parent tag
    childAfter = [s.split(None, 1)[0] for s in text6]
    return childAfter

def removeAfter(childtags): #removes everything after the  tag, example "pass"
    seperator = ']'
    for line in childtags:
        childAfter = [i.rsplit(']', 1)[0] + seperator for i in childtags]
    return childAfter

def removechild(text): #removes child, this one needs fixing
    mylst = []
    mylst = [s.split(None, 1)[1] for s in text]
    return mylst

# This function will open up the report automatically
def getDocument():
    if platform.system() == 'Darwin':
        subprocess.check_call(['open', 'report3.docx'])
    elif platform.system() == 'Windows':
        os.startfile('report3.docx')
    # os.startfile(report3) # try either one for windows if the first option gives error
    else:
        subprocess.call('xdg-open', report3)


if __name__ == '__main__':
    # Creates a word document, saves it as "report 3, and also adds a heading
    report3 = Document()
    report3.add_heading('Report', 0) #create word document
    paragraph = report3.add_paragraph()
    report3.save('report3.docx')

    # declaring different lists that will be used to store, tags and sentences
    parentTags = []
    parent = []  # This will be used to store everything
    child = [] # Used to Store child tags
    noChild = []  # Used to Store parentTags with no child
    withChild = [] # Used to Store parentTags with child tag
    parents = [] #Will be used for future function


    # Creates the gui
    window = Tk(className=' TARGEST')
    # set window size
    window.geometry("220x110")
    # Creates button 1
    button = Button(text="Choose Document",command=openFile)
    button.pack()
    # Creates button 2
    Button(window, text="Generate Report ", command=generateReport).pack()
    # Creates button 3
    getDoc = Button(window, text="Open Generated Report", command=getDocument)
    getDoc.pack()
    # Creates button 4
    button = Button(text="End Program",command=window.destroy)
    button.pack()

    window.mainloop()